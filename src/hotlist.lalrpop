use std::str::FromStr;

use version_compare::version::Version as RefVersion;

use crate::ast;
use crate::lexer;

grammar<'input>(input: &'input str);

pub HotlistHeader: ast::HotList<'input> = {
    <version:HotlistVersion> <options:HotlistOptions> => {
        ast::HotList {
            version,
            options,
            entries: Vec::<ast::EntryKind>::new()
        }
    }
}

pub HotlistVersion: RefVersion<'input> = {
    "Opera Hotlist version" <v:Version> => v
};

pub HotlistOptions: ast::Options<'input> = {
    "Options:" <mut vo:SingleOp*> => {
        let mut ops = ast::Options::<'input>::default();

        for o in vo {
            match o {
                ast::SingleOp::Encoding(encv) => {
                    ops.encoding = encv;
                }
            }
        }

        ops
    }
};

pub SingleOp: ast::SingleOp<'input> = {
    "encoding" "=" <enc:Encoding> "," "version" "=" <v:Version> => {
        let encv = match enc {
            ast::Encoding::Utf8(_) => ast::Encoding::Utf8(v)
        };
        ast::SingleOp::Encoding(encv)
    },
}

Encoding: ast::Encoding<'input> = {
    "utf8" => ast::Encoding::Utf8(RefVersion::from("0.0").unwrap())
}

//NoteBody_: () = <s:r"[^\n]*."> => unimplemented!();
Version: RefVersion<'input> = <s:Version_> => RefVersion::from(s).unwrap();

extern {
    type Location = usize;
    type Error = lexer::LexerError;

    enum lexer::Tok<'input> {
        // Literals
        "Opera Hotlist version" => lexer::Tok::HotlistVersion,
        "Options:" => lexer::Tok::Options,
        "encoding" => lexer::Tok::Encoding,
        "version" => lexer::Tok::EncodingVersion,
        "utf8" => lexer::Tok::Utf8,
        "=" => lexer::Tok::Equal,
        "#NOTE" => lexer::Tok::NoteHeader,
        "ID" => lexer::Tok::Id,
        "UNIQUEID" => lexer::Tok::UniqueId,
        "NAME" => lexer::Tok::Name,
        "URL" => lexer::Tok::Url,
        "CREATED" => lexer::Tok::Created,
        "," => lexer::Tok::Comma,

        // Regex-based
        Version_ => lexer::Tok::Version(<&'input str>),
        Integer_ => lexer::Tok::Integer(<&'input str>),
        // Uuid_ => lexer::Tok::Uuid(<&'input str>),
        // UrlBody_ => lexer::Tok::UrlBody(<&'input str>),
        NoteBody_ => lexer::Tok::NoteBody(<&'input str>),
    }
}
