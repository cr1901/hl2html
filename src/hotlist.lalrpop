use chrono::{DateTime, TimeZone, Utc};
use lalrpop_util::ParseError;
use url::Url;
use uuid::Uuid;
use version_compare::version::Version as RefVersion;

use crate::ast;
use crate::lexer;

grammar<'input>(input: &'input str);

pub HotlistHeader: ast::HotList<'input> = {
    <version:HotlistVersion> <options:HotlistOptions> => {
        ast::HotList {
            version,
            options,
            entries: Vec::<ast::EntryKind>::new()
        }
    }
}

pub HotlistVersion: RefVersion<'input> = {
    "Opera Hotlist version" <v:Version> => v
};

pub HotlistOptions: ast::Options<'input> = {
    "Options:" <vo:SingleOp*> =>? {
        let mut encoding: Option<ast::Encoding> = None;

        for o in vo {
            match o {
                ast::SingleOp::Encoding(enc) => {
                    encoding = Some(enc);
                }
            }
        }

        let encoding = encoding.ok_or(ParseError::from(ast::HotlistError::RequiredFieldMissing("encoding")))?;

        Ok(ast::Options {
            encoding
        })
    }
}

pub HotlistEntries: Vec<ast::EntryKind<'input>> = {
    <ve:SingleEntry*> => {
        ve
    }
}

pub(crate) SingleOp: ast::SingleOp<'input> = {
    "encoding" "=" <enc:Encoding> "," "version" "=" <v:Version> => {
        let encv = match enc {
            ast::Encoding::Utf8(_) => ast::Encoding::Utf8(v)
        };
        ast::SingleOp::Encoding(encv)
    },
}

SingleEntry: ast::EntryKind<'input> = {
    <n:NoteEntry> => {
        ast::EntryKind::Note(n)
    }
}

pub(crate) NoteEntry: ast::Note<'input> = {
    "#NOTE" <nfv:NoteField*> =>? {
        let mut id: Option<u32> = None;
        let mut uuid: Option<Uuid> = None;
        let mut contents: Option<&'input str> = None;
        let mut url: Option<Url> = None;
        let mut timestamp: Option<DateTime<Utc>> = None;

        for nf in nfv {
            match nf {
                ast::NoteField::Id(i) => {
                    id = Some(i);
                },
                ast::NoteField::Uuid(u) => {
                    uuid = Some(u);
                },
                ast::NoteField::Contents(c) => {
                    contents = Some(c);
                },
                ast::NoteField::Url(u) => {
                    url = Some(u);
                },
                ast::NoteField::Timestamp(t) => {
                    timestamp = Some(t)
                }
            }
        }

        let id = id.ok_or(ParseError::from(ast::HotlistError::RequiredFieldMissing("ID")))?;
        let uuid = uuid.ok_or(ParseError::from(ast::HotlistError::RequiredFieldMissing("UNIQUEID")))?;
        let contents = contents.ok_or(ParseError::from(ast::HotlistError::RequiredFieldMissing("NAME")))?;
        let url = url.ok_or(ParseError::from(ast::HotlistError::RequiredFieldMissing("URL")))?;
        let timestamp = timestamp.ok_or(ParseError::from(ast::HotlistError::RequiredFieldMissing("CREATED")))?;

        Ok(ast::Note {
            id,
            uuid,
            contents,
            url,
            timestamp
        })
    }
}

NoteField: ast::NoteField<'input> = {
    "ID" "=" <s:Integer_> =>? {
        str::parse(s).map(ast::NoteField::Id).map_err(|_| ParseError::from(ast::HotlistError::U32OutOfRange(s)))
    },

    "UNIQUEID" "=" <s:UuidOrInt> =>? {
        Uuid::parse_str(s).map(ast::NoteField::Uuid)
                          .map_err(|_| ParseError::from(ast::HotlistError::InvalidUuid(s)))
    },

    "NAME" "=" <s:NoteBody_> => {
        ast::NoteField::Contents(s)
    },

    "URL" "=" <s:UrlBody_> =>? {
        Url::parse(s).map(ast::NoteField::Url)
                     .map_err(|_| ParseError::from(ast::HotlistError::InvalidUrl(s)))
    },

    // TODO: Might in fact be an i32. Create "NegInteger" type?
    "CREATED" "=" <s:Integer_> =>? {
        // Infers type as ()... Huh?!
        // let timestamp = str::parse(s).map_err(|_| ParseError::from(ast::HotlistError::U32OutOfRange(s)))?;
        let timestamp: u32 = str::parse(s).map_err(|_| ParseError::from(ast::HotlistError::U32OutOfRange(s)))?;

        Ok(ast::NoteField::Timestamp(Utc.timestamp(timestamp as i64, 0)))
    }
}

Encoding: ast::Encoding<'input> = {
    "utf8" => ast::Encoding::Utf8(RefVersion::from("0.0").unwrap())
}

Version: RefVersion<'input> = {
    <s:Version_> => RefVersion::from(s).unwrap(),
    <s:Integer_> => RefVersion::from(s).unwrap()
}

UuidOrInt: &'input str = {
   <s:Integer_> => s,
   <s:Uuid_> => s
}

extern {
    type Location = usize;
    type Error = lexer::LexerError<'input>; // lexgen and lalrpop diverge in syntax in
                                            // this respect; lexgen needs LHS lifetime, lalrpop
                                            // doesn't.

    enum lexer::Tok<'input> {
        // Literals
        "Opera Hotlist version" => lexer::Tok::HotlistVersion,
        "Options:" => lexer::Tok::Options,
        "encoding" => lexer::Tok::Encoding,
        "version" => lexer::Tok::EncodingVersion,
        "utf8" => lexer::Tok::Utf8,
        "=" => lexer::Tok::Equal,
        "#NOTE" => lexer::Tok::NoteHeader,
        "ID" => lexer::Tok::Id,
        "UNIQUEID" => lexer::Tok::UniqueId,
        "NAME" => lexer::Tok::Name,
        "URL" => lexer::Tok::Url,
        "CREATED" => lexer::Tok::Created,
        "," => lexer::Tok::Comma,
        "EXPANDED" => lexer::Tok::Expanded,
        "TRASH FOLDER"  => lexer::Tok::TrashFolder,
        "YES"  => lexer::Tok::Yes,
        "NO" => lexer::Tok::No,
        "FOLDER" => lexer::Tok::Folder,
        "-" => lexer::Tok::FolderEnd,

        // Regex-based
        Version_ => lexer::Tok::Version(<&'input str>),
        Integer_ => lexer::Tok::Integer(<&'input str>),
        Uuid_ => lexer::Tok::Uuid(<&'input str>),
        UrlBody_ => lexer::Tok::UrlBody(<&'input str>),
        NoteBody_ => lexer::Tok::NoteBody(<&'input str>),
    }
}
