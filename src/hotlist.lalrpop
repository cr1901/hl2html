use std::str::FromStr;

use version_compare::version::Version as RefVersion;

use crate::ast;

grammar;

pub HotlistVersion: RefVersion<'input> = {
    "Opera Hotlist version" <v:Version> => v
};

pub HotlistOptions: ast::Options<'input> = {
    "Options:" <mut vo:SingleOp*> => {
        let mut ops = ast::Options::<'input>::default();

        for o in vo {
            match o {
                ast::SingleOp::Encoding(encv) => {
                    ops.encoding = encv;
                }
            }
        }

        ops
    }
};

pub SingleOp: ast::SingleOp<'input> = {
    "encoding" "=" <enc:Encoding> "," "version" "=" <v:Version> => {
        let encv = match enc {
            ast::Encoding::Utf8(_) => ast::Encoding::Utf8(v)
        };
        ast::SingleOp::Encoding(encv)
    },
}

Encoding: ast::Encoding<'input> = {
    "utf8" => ast::Encoding::Utf8(RefVersion::from("0.0").unwrap())
}

//NoteBody_: () = <s:r"[^\n]*."> => unimplemented!();
Version: RefVersion<'input> = <s:r"[0-9]+(\.[0-9])?[0-9]*"> => RefVersion::from(s).unwrap();
